<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>CSV File Viewer</title>
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha3/dist/css/bootstrap.min.css" rel="stylesheet">
  <style>
    table {
      width: 100%;
      max-width: 800px;
      margin: 0 auto;
    }
  </style>
</head>
<body>
  <div class="container my-5">
    <h1 class="text-center mb-4">CSV File Viewer</h1>
    <table class="table table-striped">
      <thead>
        <tr id="tableHeaders"></tr>
      </thead>
      <tbody id="tableBody"></tbody>
    </table>
    <div class="text-center mt-4">
      <a href="/" class="btn btn-primary">Back to Homepage</a>
    </div>
  </div>

  <script>
    const csvData = <%- JSON.stringify(csvData) %>;

    renderCsvData(csvData);

    function renderCsvData(data) {
      const tableHeaders = document.getElementById('tableHeaders');
      const tableBody = document.getElementById('tableBody');

      // Clear existing table data
      tableHeaders.innerHTML = '';
      tableBody.innerHTML = '';

      // Handle empty data scenario
      if (!data.length) {
        const message = document.createElement('tr');
        const messageCell = document.createElement('td');
        messageCell.textContent = 'No data found in the CSV file.';
        messageCell.colSpan = 1; // Since there are no headers, colspan is 1
        message.appendChild(messageCell);
        tableBody.appendChild(message);
        return;
      }

      // Get the keys (column names) from the first data object
      const keys = Object.keys(data[0]);

      // Render table headers
      const headerRow = document.createElement('tr');
      const firstHeaderCell = document.createElement('th');
      firstHeaderCell.textContent = keys[0];
      firstHeaderCell.rowSpan = 2; // Span across two rows
      headerRow.appendChild(firstHeaderCell);

      for (let i = 1; i < keys.length; i++) {
        const th = document.createElement('th');
        th.textContent = keys[i];
        headerRow.appendChild(th);
      }
      tableHeaders.appendChild(headerRow);

      // Render second row of headers (for merged cells)
      const secondHeaderRow = document.createElement('tr');
      const firstCellValues = data[0][keys[0]].split(' ');
      for (let i = 1; i < firstCellValues.length; i++) {
        const th = document.createElement('th');
        th.textContent = firstCellValues[i];
        secondHeaderRow.appendChild(th);
      }
      tableHeaders.appendChild(secondHeaderRow);

      // Render table data
      data.forEach(row => {
        const dataRow = document.createElement('tr');
        const firstDataCell = document.createElement('td');
        firstDataCell.textContent = row[keys[0]];
        firstDataCell.rowSpan = 2; // Span across two rows
        dataRow.appendChild(firstDataCell);

        for (let i = 1; i < keys.length; i++) {
          const td = document.createElement('td');
          td.textContent = row[keys[i]];
          dataRow.appendChild(td);
        }
        tableBody.appendChild(dataRow);
      });
    }
  </script>

  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha3/dist/js/bootstrap.bundle.min.js"></script>
</body>
</html>